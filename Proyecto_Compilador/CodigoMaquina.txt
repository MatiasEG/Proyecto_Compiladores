.CODE
   PUSH mainMain
   CALL
   HALT

# ---------------- simple_heap_init ---------------- 
simple_heap_init:RET 0 # Inicializacion simple del .heap

# ---------------- simple_malloc ---------------- 
simple_malloc:
              LOADFP # Inicializacion unidad
              LOADSP
              STOREFP # Finaliza inicializacion del RA
              LOADHL # hl
              DUP # hl
              PUSH 1
              ADD # hl + 1
              STORE 4 # Guarda resultado (puntero a base del bloque)
              LOAD 3 # Carga cantidad de celdas a alojar (parametro)
              ADD
              STOREHL # Mueve el heap limit (hl)
              STOREFP
              RET 1 # Retorna eliminando el parametro

.DATA

VT_A: DW m1A

.CODE

# ---------------- AConstructor ---------------- 
AConstructor:
             LOADFP
             LOADSP
             STOREFP
             FMEM 0 # Se elimina el espacio reservado para las variables locales.
             STOREFP
             RET 1

# ---------------- m1A ---------------- 
m1A:
    LOADFP
    LOADSP
    STOREFP
    RMEM 1 # Comienzo del String
    PUSH 8 # Lugares del heap
    PUSH simple_malloc
    CALL
    DUP # Ref del comienzo del String
    PUSH 'm'
    STOREREF 0
    DUP # Ref del comienzo del String
    PUSH '1'
    STOREREF 1
    DUP # Ref del comienzo del String
    PUSH ' '
    STOREREF 2
    DUP # Ref del comienzo del String
    PUSH 'e'
    STOREREF 3
    DUP # Ref del comienzo del String
    PUSH 'n'
    STOREREF 4
    DUP # Ref del comienzo del String
    PUSH ' '
    STOREREF 5
    DUP # Ref del comienzo del String
    PUSH 'A'
    STOREREF 6
    DUP # Ref del comienzo del String
    PUSH 0 # Caracter terminador
    STOREREF 7
    PUSH printSlnSystem
    CALL
    FMEM 0 # Se elimina el espacio reservado para las variables locales.
    STOREFP
    RET 1

.DATA

VT_B: DW m1A, m2B

.CODE

# ---------------- BConstructor ---------------- 
BConstructor:
             LOADFP
             LOADSP
             STOREFP
             FMEM 0 # Se elimina el espacio reservado para las variables locales.
             STOREFP
             RET 1

# ---------------- m2B ---------------- 
m2B:
    LOADFP
    LOADSP
    STOREFP
    RMEM 1 # Comienzo del String
    PUSH 8 # Lugares del heap
    PUSH simple_malloc
    CALL
    DUP # Ref del comienzo del String
    PUSH 'm'
    STOREREF 0
    DUP # Ref del comienzo del String
    PUSH '2'
    STOREREF 1
    DUP # Ref del comienzo del String
    PUSH ' '
    STOREREF 2
    DUP # Ref del comienzo del String
    PUSH 'e'
    STOREREF 3
    DUP # Ref del comienzo del String
    PUSH 'n'
    STOREREF 4
    DUP # Ref del comienzo del String
    PUSH ' '
    STOREREF 5
    DUP # Ref del comienzo del String
    PUSH 'B'
    STOREREF 6
    DUP # Ref del comienzo del String
    PUSH 0 # Caracter terminador
    STOREREF 7
    PUSH printSlnSystem
    CALL
    FMEM 0 # Se elimina el espacio reservado para las variables locales.
    STOREFP
    RET 1

.DATA

VT_C: DW m2C

.CODE

# ---------------- CConstructor ---------------- 
CConstructor:
             LOADFP
             LOADSP
             STOREFP
             FMEM 0 # Se elimina el espacio reservado para las variables locales.
             STOREFP
             RET 1

# ---------------- m2C ---------------- 
m2C:
    LOADFP
    LOADSP
    STOREFP
    RMEM 1 # Comienzo del String
    PUSH 8 # Lugares del heap
    PUSH simple_malloc
    CALL
    DUP # Ref del comienzo del String
    PUSH 'm'
    STOREREF 0
    DUP # Ref del comienzo del String
    PUSH '2'
    STOREREF 1
    DUP # Ref del comienzo del String
    PUSH ' '
    STOREREF 2
    DUP # Ref del comienzo del String
    PUSH 'e'
    STOREREF 3
    DUP # Ref del comienzo del String
    PUSH 'n'
    STOREREF 4
    DUP # Ref del comienzo del String
    PUSH ' '
    STOREREF 5
    DUP # Ref del comienzo del String
    PUSH 'C'
    STOREREF 6
    DUP # Ref del comienzo del String
    PUSH 0 # Caracter terminador
    STOREREF 7
    PUSH printSlnSystem
    CALL
    FMEM 0 # Se elimina el espacio reservado para las variables locales.
    STOREFP
    RET 1

.DATA

VT_D: DW m2C, m1D

.CODE

# ---------------- m1D ---------------- 
m1D:
    LOADFP
    LOADSP
    STOREFP
    RMEM 1 # Comienzo del String
    PUSH 8 # Lugares del heap
    PUSH simple_malloc
    CALL
    DUP # Ref del comienzo del String
    PUSH 'm'
    STOREREF 0
    DUP # Ref del comienzo del String
    PUSH '1'
    STOREREF 1
    DUP # Ref del comienzo del String
    PUSH ' '
    STOREREF 2
    DUP # Ref del comienzo del String
    PUSH 'e'
    STOREREF 3
    DUP # Ref del comienzo del String
    PUSH 'n'
    STOREREF 4
    DUP # Ref del comienzo del String
    PUSH ' '
    STOREREF 5
    DUP # Ref del comienzo del String
    PUSH 'D'
    STOREREF 6
    DUP # Ref del comienzo del String
    PUSH 0 # Caracter terminador
    STOREREF 7
    PUSH printSlnSystem
    CALL
    FMEM 0 # Se elimina el espacio reservado para las variables locales.
    STOREFP
    RET 1

# ---------------- DConstructor ---------------- 
DConstructor:
             LOADFP
             LOADSP
             STOREFP
             FMEM 0 # Se elimina el espacio reservado para las variables locales.
             STOREFP
             RET 1

.DATA

VT_Main: NOP

.CODE

# ---------------- mainMain ---------------- 
mainMain:
         LOADFP
         LOADSP
         STOREFP
         RMEM 1 # Lugar de retorno
         PUSH getBI1Main
         CALL
         DUP # Duplico this
         LOADREF 0 # Consumo un this y lo reemplazo por su VT
         LOADREF 0 # Lugar de retorno
         CALL # Realizo la llamada a metodo dinamico
         RMEM 1 # Lugar de retorno
         PUSH getBI2Main
         CALL
         DUP # Duplico this
         LOADREF 0 # Consumo un this y lo reemplazo por su VT
         LOADREF 0 # Lugar de retorno
         CALL # Realizo la llamada a metodo dinamico
         RMEM 1 # Lugar de retorno
         PUSH getDI1Main
         CALL
         DUP # Duplico this
         LOADREF 0 # Consumo un this y lo reemplazo por su VT
         LOADREF 0 # Lugar de retorno
         CALL # Realizo la llamada a metodo dinamico
         RMEM 1 # Lugar de retorno
         PUSH getDI2Main
         CALL
         DUP # Duplico this
         LOADREF 0 # Consumo un this y lo reemplazo por su VT
         LOADREF 0 # Lugar de retorno
         CALL # Realizo la llamada a metodo dinamico
         FMEM 0 # Se elimina el espacio reservado para las variables locales.
         STOREFP
         RET 0

# ---------------- getBI1Main ---------------- 
getBI1Main:
           LOADFP
           LOADSP
           STOREFP
           FMEM 0 # Libero los lugares de las var locales
           RMEM 1 # Resultado de malloc, referencia al CIR de un objeto
           PUSH 1 # Parametro malloc, cant de atributos del objeto + 1 para VT
           PUSH simple_malloc
           CALL
           DUP # de la referencia al nuevo CIR
           PUSH VT_B
           STOREREF 0 # Consume una de las dupicas de la referencia al CIR
           DUP # de la referencia al objeto
           PUSH BConstructor
           CALL # Invoco el constructor
           STORE 3 # Se coloca el valor de retorno en su ubicacion reservada
           STOREFP 
           RET 0 # Efectuamos el retorno liberando la cantidad de parametros
           FMEM 0 # Se elimina el espacio reservado para las variables locales.
           STOREFP
           RET 0

# ---------------- getBI2Main ---------------- 
getBI2Main:
           LOADFP
           LOADSP
           STOREFP
           FMEM 0 # Libero los lugares de las var locales
           RMEM 1 # Resultado de malloc, referencia al CIR de un objeto
           PUSH 1 # Parametro malloc, cant de atributos del objeto + 1 para VT
           PUSH simple_malloc
           CALL
           DUP # de la referencia al nuevo CIR
           PUSH VT_B
           STOREREF 0 # Consume una de las dupicas de la referencia al CIR
           DUP # de la referencia al objeto
           PUSH BConstructor
           CALL # Invoco el constructor
           STORE 3 # Se coloca el valor de retorno en su ubicacion reservada
           STOREFP 
           RET 0 # Efectuamos el retorno liberando la cantidad de parametros
           FMEM 0 # Se elimina el espacio reservado para las variables locales.
           STOREFP
           RET 0

# ---------------- MainConstructor ---------------- 
MainConstructor:
                LOADFP
                LOADSP
                STOREFP
                FMEM 0 # Se elimina el espacio reservado para las variables locales.
                STOREFP
                RET 1

# ---------------- getDI1Main ---------------- 
getDI1Main:
           LOADFP
           LOADSP
           STOREFP
           FMEM 0 # Libero los lugares de las var locales
           RMEM 1 # Resultado de malloc, referencia al CIR de un objeto
           PUSH 1 # Parametro malloc, cant de atributos del objeto + 1 para VT
           PUSH simple_malloc
           CALL
           DUP # de la referencia al nuevo CIR
           PUSH VT_D
           STOREREF 0 # Consume una de las dupicas de la referencia al CIR
           DUP # de la referencia al objeto
           PUSH DConstructor
           CALL # Invoco el constructor
           STORE 3 # Se coloca el valor de retorno en su ubicacion reservada
           STOREFP 
           RET 0 # Efectuamos el retorno liberando la cantidad de parametros
           FMEM 0 # Se elimina el espacio reservado para las variables locales.
           STOREFP
           RET 0

# ---------------- getDI2Main ---------------- 
getDI2Main:
           LOADFP
           LOADSP
           STOREFP
           FMEM 0 # Libero los lugares de las var locales
           RMEM 1 # Resultado de malloc, referencia al CIR de un objeto
           PUSH 1 # Parametro malloc, cant de atributos del objeto + 1 para VT
           PUSH simple_malloc
           CALL
           DUP # de la referencia al nuevo CIR
           PUSH VT_D
           STOREREF 0 # Consume una de las dupicas de la referencia al CIR
           DUP # de la referencia al objeto
           PUSH DConstructor
           CALL # Invoco el constructor
           STORE 3 # Se coloca el valor de retorno en su ubicacion reservada
           STOREFP 
           RET 0 # Efectuamos el retorno liberando la cantidad de parametros
           FMEM 0 # Se elimina el espacio reservado para las variables locales.
           STOREFP
           RET 0

# ---------------- debugPrintObject ---------------- 
debugPrintObject:
                 LOADFP
                 LOADSP
                 STOREFP
                 LOAD 3
                 IPRINT
                 PRNLN
                 STOREFP
                 RET 1

# ---------------- readSystem ---------------- 
readSystem:
           LOADFP
           LOADSP
           STOREFP
           READ
           STORE 3
           STOREFP
           RET 0

# ---------------- printBSystem ---------------- 
printBSystem:
             LOADFP
             LOADSP
             STOREFP
             LOAD 3
             BPRINT
             STOREFP
             RET 1

# ---------------- printCSystem ---------------- 
printCSystem:
             LOADFP
             LOADSP
             STOREFP
             LOAD 3
             CPRINT
             STOREFP
             RET 1

# ---------------- printISystem ---------------- 
printISystem:
             LOADFP
             LOADSP
             STOREFP
             LOAD 3
             IPRINT
             STOREFP
             RET 1

# ---------------- printSSystem ---------------- 
printSSystem:
             LOADFP
             LOADSP
             STOREFP
             LOAD 3
             SPRINT
             STOREFP
             RET 1

# ---------------- printlnSystem ---------------- 
printlnSystem:
              LOADFP
              LOADSP
              STOREFP
              PRNLN
              STOREFP
              RET 0

# ---------------- printBlnSystem ---------------- 
printBlnSystem:
               LOADFP
               LOADSP
               STOREFP
               LOAD 3
               BPRINT
               PRNLN
               STOREFP
               RET 1

# ---------------- printClnSystem ---------------- 
printClnSystem:
               LOADFP
               LOADSP
               STOREFP
               LOAD 3
               CPRINT
               PRNLN
               STOREFP
               RET 1

# ---------------- printIlnSystem ---------------- 
printIlnSystem:
               LOADFP
               LOADSP
               STOREFP
               LOAD 3
               IPRINT
               PRNLN
               STOREFP
               RET 1

# ---------------- printSlnSystem ---------------- 
printSlnSystem:
               LOADFP
               LOADSP
               STOREFP
               LOAD 3
               SPRINT
               PRNLN
               STOREFP
               RET 1

